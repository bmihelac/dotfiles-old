"flake8
autocmd FileType python map <buffer> <M-F7> :call Flake8()<CR>

call pathogen#runtime_append_all_bundles() 
call pathogen#helptags()

set runtimepath^=~/.vim/bundle/ctrlp.vim

source ~/.vim/vimrc
"source ~/.vim/activate_django.vim

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
" set clipboard=unnamed

"Map leader to ,
let mapleader = ","

" keys in terminal
set <S-F5>=[18~
map <S-F5> :NERDTreeToggle<CR>


map <F3> :NERDTreeToggle<CR>
nnoremap <F2> :set invpaste paste?<CR>

:set guioptions-=T  "remove toolbar
:set guioptions-=m  "remove menubar

" Change to directory of the opened file
command! CD cd %:p:h

" Activate the snippets
autocmd FileType python set ft=python.django " For SnipMate
autocmd FileType html set ft=htmldjango.html " For SnipMate
autocmd FileType xhtml set ft=htmldjango.html " For SnipMate

" Tidy
"setlocal makeprg=tidy\ -quiet\ -errors\ %
"setlocal errorformat=line\ %l\ column\ %v\ -\ %m

" for CSS, also have things in braces indented:
autocmd FileType css set smartindent
" for HTML, generally format text, but if a long line has been created
" leave it alone when editing:
autocmd FileType html set formatoptions+=tl
" for both CSS and HTML, use genuine tab characters for 
" indentation, to make files a few bytes smaller:
autocmd FileType html,htmldjango set et sw=2 sts=2 ts=2
autocmd FileType python set ai ts=4 sts=4 et sw=4
autocmd FileType javascript,scss,css,less.css set ai et ts=2 sts=2 sw=2
autocmd BufNewFile,BufRead *.jst.ejs set filetype=html

"Let zen-coding and less work together
autocmd FileType less set ft=less.css

" line numbers
:nmap <F9> :set invnumber<CR>

" ignore
:set wildignore=*.o,*~,*.pyc

" command-t
let g:fuzzy_ignore="*.pyc,*~,tmp/*"
set wildignore+=*.jpg,*.gif,*.png,*.pdf,node_modules/**

"ctrlp
let g:ctrlp_map = '<c-f>'
let g:ctrlp_cmd = 'CtrlP'

"NerdTREE mapings
:map <F5> :NERDTreeFind<CR>

" Auto reload changed files
:set autoread

" map enter to add new line below current staying in normal mode 
map <Enter> o<Esc>
map <S-Enter> o<Esc>

" smart ignorecase
:set smartcase

" map cmd-] and cmd-[ to next/prev tab
" TODO: test in ubuntu
nmap <D-[> gT
nmap <D-]> gt
map <D-1> 1gt
map <D-2> 2gt
map <D-3> 3gt
map <D-4> 4gt
map <D-5> 5gt
map <D-6> 6gt
map <D-7> 7gt
map <D-8> 8gt
map <D-9> 9gt
map <silent><A-Right> :tabnext<CR> 
map <silent><A-Left> :tabprevious<CR> 

"toggle search options
:map <D-F5> :set invincsearch<CR>
:nmap <silent> ,/ :nohlsearch<CR>

"http://superuser.com/a/555047/33547
function! TabCloseRight(bang)
    let cur=tabpagenr()
    while cur < tabpagenr('$')
        exe 'tabclose' . a:bang . ' ' . (cur + 1)
    endwhile
endfunction
command! -bang Tabcloseright call TabCloseRight('<bang>')

nnoremap <Leader>t :tabnew<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <Leader>tr :Tabcloseright<CR>
nnoremap <Leader>to :tabonly<CR>
nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <Leader>9 9gt

nnoremap <Leader>,m :set mouse-=a
nnoremap <Leader>,M :set mouse+=a
"
"copy current file name to register
:nmap <Leader>f :let @+ = expand('%:t')<CR>
:nmap <Leader>F :let @+ = expand('%:p')<CR>

" Scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

set visualbell           " don't beep
set noerrorbells         " don't beep

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" disable backups
set nobackup
set noswapfile
set nowritebackup

" highlights the background in a subtle red for text that goes over the 80
set cc=80

"yankring
:nnoremap <silent> <F10> :YRShow<CR>

" replace the current word with the last yanked text
nnoremap S "_diwP

" rest headings
let @q='yypVr='
let @w='yypVr-'
let @e='yypVr^'

"python-mode
" use vim-python-pep8-indent
let g:pymode_indent = 0
" do not Load pylint code plugin, use flake8 for now
let g:pymode_lint = 0
" do not set "number"
let g:pymode_options = 0

imap <F12> <M-/>
map <C-F12> :RopeAutoImport<CR>
map <C-S-A-F12> :RopeGenerateAutoimportCache<CR>
let g:pymode_rope_autoimport_modules = ["os","shutil","datetime", "django", "django.*"]
map <F7> <Leader>b

map <silent> <F12> :let @+=@"<CR>

" sudo & write
cmap w!! w !sudo tee % >/dev/null

" MacVim
if has("gui_macvim")
    set guifont=Monaco\ for\ Powerline:h12
    "set guifont=Inconsola
endif

colorscheme wombat256mod

" really remove
nnoremap R "_d

" http://vim.wikia.com/wiki/Diff_current_buffer_and_the_original_file
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

" django test runner
"map <leader>dt :set makeprg=python\ manage.py\ test\|:call MakeGreen()<CR>

" edit my vimrc
:nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
:nnoremap <Leader>sv :so $MYVIMRC<CR>

" ack
:nnoremap <leader>a <Esc>:Ack! 


" Map key to toggle opt
function! MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command! -nargs=+ MapToggle call MapToggle(<f-args>)

MapToggle <F11> ignorecase
MapToggle <F4> list

"
" swap 2 params in visual selection
" ie: fun(a(), b()) => fun(b(), a())
:vnoremap <Leader>s :s/\%V\([^,]\+\)\(, *\)\(.*\%V.\)/\3\2\1<CR>gv<Esc>:noh<CR>

:nnoremap <Leader>sw :Git add .<CR>:Git commit -a -m "edited via VIM"<CR>:Git push<CR>

" Write contents of register to remote file
:nnoremap <leader>xc :new<CR>P:w scp://localhost/clipboard.txt<CR><CR>:bd<CR>

"quote every line in single quotes, add comma at the end, and reformat block
:vnoremap <Leader>q' :s/\(.*\)/'\1',/g<CR>gv=:nohlsearch<CR>

" make django dict from kwargs in selection
" converts a=b into 'a': b
:vnoremap <Leader>qd :s/\(\w\+\)=/'\1': /g<CR>

" tidy html
:vnoremap <Leader>T :!tidy -q -i -xml<CR>

" always vertical split in diff
:set diffopt+=vertical

"vim-powerline
let g:Powerline_symbols = 'fancy'

"zen-coding
let g:user_zen_settings = { 'indentation' : ' ' }

"syntastic
let g:syntastic_mode_map = { 'mode': 'active',
                             \ 'active_filetypes': ['ruby', 'python'],
                             \ 'passive_filetypes': ['html'] }"
let g:syntastic_auto_loc_list=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_javascript_checkers=['jshint']

" xml formattin<D-1><D-2>
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null


"convert trailing tabs to 2 spaces
:nnoremap <Leader>ts :%s/\t/  /g<CR>

"remove whitespace at end of lines
:nnoremap <Leader>rs :%s/\s\+$//g<CR>

" fugitive shortcuts
" push
:nnoremap <Leader>gps :Git push<CR>
" commit current file
:nnoremap <Leader>gc :Git commit % -m ""<left>
" diff current file
:nnoremap <Leader>gd :Gdiff<CR>
" status
:nnoremap <Leader>gs :Gstatus<CR>

"html helpers
"wrap selection in a link
:vmap <Leader>wa S<a href="#">

"xml helpers
"convert '<ID>20000608012</ID>'  to 'ID=20000608012,' on current line
:nnoremap <Leader>xx :s/<\(\w\+\)>\([^<]\+\)<[^>]\+>/\1='\2',/g

"insert iso-date
:nnoremap <Leader>d "=strftime("%Y-%m-%d")<CR>P

"convert compass variable to less variable
:nnoremap <Leader>cl :%s/\$\(\w\+\)/@\1/g<CR>

"disable pydoc
let g:pymode_doc = 0

"quickfix
nmap <A-K> :lprev<CR>
nmap <A-J> :lnext<CR>
nmap <script> <silent> <A-L> :call ToggleLocationList()<CR>
